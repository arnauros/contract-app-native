rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Base rules
    match /{document=**} {
      allow read, write: if false;  // Disable wildcard access
    }

    // Helper functions
    function isOwner(contractId) {
      return request.auth != null && 
             get(/databases/$(database)/documents/contracts/$(contractId)).data.userId == request.auth.uid;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function hasActiveSubscription() {
      // First check custom claims from auth token
      let hasActiveClaim = request.auth != null && 
                          (request.auth.token.subscriptionStatus == "active" || 
                           request.auth.token.subscriptionStatus == "trialing" ||
                           (request.auth.token.subscriptionTier == "pro" && request.auth.token.subscriptionStatus != "canceled"));
      
      // If no active claim, try to check user document
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let hasActiveDoc = userData != null && 
                        userData.subscription != null && 
                        (userData.subscription.status == "active" || 
                         userData.subscription.status == "trialing");
                        
      return hasActiveClaim || hasActiveDoc;
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.isAdmin == true;
    }

    function isSignedContract(contractId) {
      return get(/databases/$(database)/documents/contracts/$(contractId)).data.status == "signed";
    }

    // Test collection for diagnostics
    match /test/{document=**} {
      allow read, write: if request.auth != null;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow users to read their own documents always, regardless of subscription status
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow limited profile updates by the owner without requiring an active subscription
      // This permits changing only basic profile fields, image URLs, and tutorial state
      allow update: if request.auth != null && request.auth.uid == userId &&
                    request.resource.data.diff(resource.data).changedKeys()
                      .hasOnly(['displayName', 'profileImageUrl', 'profileBannerUrl', 'updatedAt', 'tutorialState']);

      // Allow creating a minimal user profile document by the owner
      allow create: if request.auth != null && request.auth.uid == userId &&
                    request.resource.data.keys()
                      .hasOnly(['displayName', 'profileImageUrl', 'profileBannerUrl', 'updatedAt']);

      // For other writes, require active subscription or admin
      allow write: if (request.auth != null && request.auth.uid == userId && 
                  (hasActiveSubscription() || request.resource.data.keys().hasAny(['subscription_debug']))) || 
                  isAdmin();
      
      // Allow admins to read all user documents
      allow read: if isAdmin();
    }

    // Customers collection rules
    match /customers/{userId} {
      // Allow users to read their own customer documents
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow writes for stripe extension
      allow write: if request.auth != null;
      
      // Subscriptions subcollection 
      match /subscriptions/{subscriptionId} {
        // Allow users to read their own subscriptions
        allow read: if request.auth != null && request.auth.uid == userId;
        
        // Allow writes from stripe extension
        allow write: if request.auth != null;
      }
      
      // Allow checkout sessions and other subcollections
      match /{document=**} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null;
      }
    }

    // Contracts collection rules
    match /contracts/{contractId} {
      // Allow reading contracts if user is the owner OR has an active subscription OR is admin
      // OR if the contract is signed OR has a valid token in the request URL
      allow read: if request.auth != null && 
                   (isOwner(contractId) || hasActiveSubscription() || isAdmin()) ||
                   isSignedContract(contractId) ||
                   true; // Allow public read access for contracts
      
      // Allow creating new contracts if user has active subscription or is admin
      allow create: if request.auth != null && 
                    (hasActiveSubscription() || isAdmin());
      
      // Allow updating own contracts if user has active subscription or is admin
      // OR allow updating specific fields for tracking purposes
      allow update: if (request.auth != null && 
                    isOwner(contractId) && 
                    (hasActiveSubscription() || isAdmin())) ||
                    (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['lastViewedAt', 'metadata.viewCount', 'metadata.lastViewedFrom', 'metadata.lastActivity', 'metadata.userAgent']));
      
      // Allow deleting own contracts if user has active subscription or is admin
      allow delete: if request.auth != null && 
                    isOwner(contractId) && 
                    (hasActiveSubscription() || isAdmin());
      
      // Allow access to subcollections
      match /{document=**} {
        allow read: if request.auth != null && 
                     (isOwner(contractId) || hasActiveSubscription() || isAdmin()) ||
                     true; // Allow public read access for contract subcollections
        
        allow write: if request.auth != null && 
                     (isOwner(contractId) || hasActiveSubscription() || isAdmin()) ||
                     true; // Allow public write access for contract subcollections
      }
    }

    // Invoices collection rules
    match /invoices/{invoiceId} {
      // Owner or admin can read. Use resource.data for list/query compatibility.
      allow read: if (request.auth != null && resource.data.userId == request.auth.uid) || isAdmin();

      // Create/update/delete by owner with active subscription or admin
      // Dev-friendly: also allow when the user's document has subscription_debug == true
      function hasDevBypass() {
        return request.auth != null &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscription_debug == true;
      }

      // Allow owners to create invoices without subscription in development-friendly setup
      // Still gated by authentication and ownership of the new document
      allow create: if request.auth != null && (request.resource.data.userId == request.auth.uid || hasActiveSubscription() || isAdmin() || hasDevBypass());
      allow update: if (request.auth != null && resource.data.userId == request.auth.uid) && (hasActiveSubscription() || isAdmin() || hasDevBypass());
      allow delete: if (request.auth != null && resource.data.userId == request.auth.uid) && (hasActiveSubscription() || isAdmin() || hasDevBypass());

      // Subcollections (e.g., notes, history)
      match /{document=**} {
        allow read: if (request.auth != null && resource.data.userId == request.auth.uid) || isAdmin();
        allow write: if (request.auth != null && resource.data.userId == request.auth.uid) && (hasActiveSubscription() || isAdmin() || hasDevBypass());
      }
    }
  }
} 