rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Base rules
    match /{document=**} {
      allow read, write: if false;  // Disable wildcard access
    }

    // Helper functions
    function isOwner(contractId) {
      return request.auth != null && 
             get(/databases/$(database)/documents/contracts/$(contractId)).data.userId == request.auth.uid;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function hasCustomToken() {
      return request.auth != null && request.auth.token != null && request.auth.token.token != null;
    }

    function isSignedContract(contractId) {
      return get(/databases/$(database)/documents/contracts/$(contractId)).data.status == "signed";
    }

    // Users collection rules
    match /users/{userId} {
      // Allow users to read and write their own documents
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admins to read all user documents (you can customize this as needed)
      // allow read: if request.auth != null && request.auth.token.admin == true;
    }

    // Customers collection rules - Fixed to properly handle subscription checks
    match /customers/{userId} {
      // Allow users to read their own customer documents
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow writes for stripe extension
      allow write: if request.auth != null;
      
      // Subscriptions subcollection 
      match /subscriptions/{subscriptionId} {
        // Allow users to read their own subscriptions
        allow read: if request.auth != null && request.auth.uid == userId;
        
        // Allow writes from stripe extension
        allow write: if request.auth != null;
      }
      
      // Allow checkout sessions and other subcollections
      match /{document=**} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null;
      }
    }

    // Contracts collection rules - TEMPORARY MORE PERMISSIVE FOR DEBUGGING
    match /contracts/{contractId} {
      // Allow reading all contracts for any authenticated user for debugging
      allow read: if request.auth != null;
      
      // Allow creating new contracts
      allow create: if request.auth != null;
      
      // Allow updating own contracts or any contract in development mode
      allow update: if request.auth != null;
      
      // Allow deleting own contracts
      allow delete: if request.auth != null;
      
      // Allow access to subcollections
      match /{document=**} {
        allow read, write: if request.auth != null;
      }
    }
  }
} 